{
  "hash": "36c8e7571d8b2b9279d38f5817f477af",
  "result": {
    "markdown": "---\ntitle: \"Understanding \\\"forbidden zones\\\"\"\n# description:\nauthor:\n  - name: Josue Baeza\n    url: https://josuebaeza.com/\n    orcid: 0000-0003-4960-3905\ndate: 12-03-2023\ndate-modified: last-modified\ncategories: [Mass Spectrometry, DIA, Skyline] # self-defined categories\n# image: \ntoc: true\ntoc-location: left\ntoc-expand: true\ndraft: false \n---\n\n\n# Background\n\nWhat are \"forbidden zones\" when working with mass spectrometry-based data. Forbidden zones, described in [Frahm et. al. (2006)](https://doi.org/10.1002/jms.1024), are the areas in the precursor mass range where peptides are not found. A more recent publication describing forbidden zones for DIA method development can be found in [Pino et. al. (2020)](https://doi.org/10.1074/mcp.P119.001913).\n\n![Forbidden Zones described in Pino et.al. (2020)](gr6_lrg.jpg)\n\n\nThe \"optimize window placement\" feature in [Skyline](https://skyline.ms/) is there to place the boundaries of DIA windows in these forbidden zones.\n\n![Skyline Screenshot](optimize_window_placement.png){width=\"40%\"}\n\n\nThis blog post aims to understand DIA methods, window placement, and forbidden zones.\n\n# Workflow\n\n\n```{mermaid}\n\n\nflowchart LR\n  A[Fasta\\nProteome] --> C[Unmodified]\n  A[Fasta\\nProteome] --> D(Acetyl Lysine)\n  C --> E[in silico\\ndigest]\n  D --> F(in silico\\ndigest)\n  E --> G[calculate\\nprecursor m/z]\n  F --> G[calculate\\nprecursor m/z]\n  G --> H[m/z distribution]\n  G --> J[Forbidden zones]\n  J --> K[Optimal window placement]\n  \n```\n\n\n\n\n## Importing data\n\n-   Human fasta file\n-   Acetyl Spectral library (from [Baeza et.al. 2020](https://pubs.acs.org/doi/10.1021/acs.jproteome.0c00088))\n-   Precursor isolation windows\n\nWe're going to analyze three data sets. The first is an *in silico* digest of the human proteome. The second is an *in silico* digest of the human proteome with acetyl-lysine (AcK) modifications present. The third is a spectral library from [Baeza et. al.](https://pubs.acs.org/doi/10.1021/acs.jproteome.0c00088)\n\n\n\n\n\n\n#### Global functions\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Digesting protein\ndigest_argc <- function(sequence){\n  tryCatch(\n    digest_aa_sequence(sequence, enzyme = \"arg.c\", missed = 0)$peptide,\n    error = function(e) NA,\n    warning = function(w) NA\n    )\n}\n\n# Digesting protein\ndigest_tryp <- function(sequence){\n  tryCatch(\n    digest_aa_sequence(sequence, enzyme = \"trypsin\", missed = 0)$peptide,\n    error = function(e) NA,\n    warning = function(w) NA\n    )\n}\n```\n:::\n\n\n## Setting global variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Minimum peptide length\nmin_pep_len <- 7\n\n# Mass of Proton (Da)\nproton <- 1.007276466\n\n# Acetylation mass (Da)\nack_d0_mass <- 42.010565\nack_d3_mass <- ack_d0_mass - 3*(1.007825) + 3*(2.014102) \n\n# for the mz distribution\nmin_mz <- 300\nmax_mz <- 2500\n\n# for zooming in the mz distribution\nmz1 <- 640\nmz2 <- 650\n```\n:::\n\n\n## *In-silico* digest of the human proteome\n\nThe first step is to perform an *in silico* digest of the complete human fasta file using trypsin cleavage rules. This is a list of all possible tryptic peptides with a charge state of 2 or 3 and at least 7 amino acid residues.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Digesting human proteome\n# filtering for a minimum peptide length\nhu_prot <- hu_fasta %>% \n  mutate(peptide = map(ProteinSequence, digest_tryp)) %>% # digesting proteome TAKES A LONG TIME!\n  unnest(peptide) %>% \n  select(-ProteinSequence) %>% \n  mutate(pep_len = nchar(peptide)) %>% # Counting peptide length\n  filter(pep_len >= min_pep_len) # Filtering for peptide size\n\n# Calculating monoisotopic mass\n# All lysines have acetyl modification\nhu_prot <- hu_prot %>% \n  mutate(monoisotopic_mass = calculate_monoisotopic_mass(peptide, IAA = TRUE, AcK = FALSE))\n\n# Calculating most likely charge state based on R|H + 1\nhu_prot$z <- sapply(hu_prot$peptide, function(x){\n  length(unlist(gregexpr(\"K|R|H\", x))) + 1 # For N-terminus\n})\n\n# calculating precursor m/z\n# assuming z=2; z=3\nhu_prot <- hu_prot %>% \n  filter(z == 2 | z == 3) %>% \n  mutate(precursor_mz = (monoisotopic_mass + (z * proton)) / z)\n```\n:::\n\n\n## *In-silico* digest of the acetyl proteome\n\nIn this step, I am adding an acetyl modification to every lysine residue and digesting the complete human proteome using the Arg-C digest rules. Acetylation on lysine residues prevents the proteolytic digestion by trypsin. Therefore only the arginine residues are used for digestion.\n\nTo generate *in silico* AcK peptides, I change the digestion rule from trypsin to ArgC. Trypsin cleaves at K and R residues, while ArgC cleaves at R residues only. Then, the mass of 42.010565 and 45.029396 is added for light and heavy AcK peptides, respectively. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Digesting human proteome\n# Filtering for lysine containing peptides\n# filtering for a minimum peptide length\nhu_acetyl <- hu_fasta %>% \n  mutate(peptide = map(ProteinSequence, digest_argc)) %>% \n  unnest(peptide) %>% \n  select(-ProteinSequence) %>% \n  mutate(k_count = str_count(peptide, \"K\"),\n         pep_len = nchar(peptide)) %>% \n  filter(k_count > 0,\n         pep_len >= min_pep_len)\n\n# Calculating monoisotopic mass\n# All lysines have acetyl modification - either light (non-isotopic) or D3-Acetyl\nhu_acetyl <- hu_acetyl %>% \n  mutate(Ack_D0 = calculate_monoisotopic_mass(peptide, IAA = TRUE, AcK = TRUE),\n         AcK_D3 = Ack_D0 - k_count*ack_d0_mass + k_count*ack_d3_mass) %>% \n  gather(isotope, monoisotopic_mass, Ack_D0, AcK_D3)\n\n# Calculating most likely charge state based on R|H + 1\nhu_acetyl$z <- sapply(hu_acetyl$peptide, function(x){\n  length(unlist(gregexpr(\"R|H\", x))) + 1 # for n-terminus\n})\n\n# calculating precursor m/z\n# assuming z=2; z=3\nhu_acetyl <- hu_acetyl %>% \n  filter(z == 2 | z == 3) %>% \n  mutate(precursor_mz = (monoisotopic_mass + (z * proton)) / z)\n```\n:::\n\n\n## Acetyl spectral library cleaning\n\nI have a spectral library that was published in [Baeza et.al. 2020](https://pubs.acs.org/doi/10.1021/acs.jproteome.0c00088). I will also use this spectral library to compare with the human proteome analysis. As a clean up step, I am filtering only for peptides that are acetylated, i.e., contain a lysine residue.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Filtering for acetyl peptide\nack_speclib <- ack_speclib %>% \n  mutate(acetyl = str_detect(ModifiedPeptide, \"Acetyl \\\\(K\"),\n         heavy = str_detect(LabeledPeptide, \"Acetyl D3\")) %>% \n  filter(acetyl == TRUE)\n\n# Removing duplicate entries\nack_speclib <- ack_speclib %>% \n  select(PrecursorCharge, PrecursorMz, StrippedPeptide, ModifiedPeptide, LabeledPeptide,\n         ProteinGroups, acetyl, heavy) %>% \n  distinct()\n```\n:::\n\n\n## mz distribution\n\n### Tryptic digest\n\nPlotting the *m/z* distribution for tryptic peptide precursors\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(hu_prot %>% filter(precursor_mz > min_mz, precursor_mz < max_mz),\n       aes(x = precursor_mz)) +\n  geom_histogram(position = \"dodge\", binwidth = 10, color = \"black\", fill = \"grey80\") +\n  # annotate(\"rect\", xmin = mz1, xmax = mz2, ymin = 0, ymax = Inf) +\n  scale_x_continuous(n.breaks = 15) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  theme_bw(base_size = 14) +\n  labs(title = \"Peptide m/z distribution\",\n       subtitle = \"Tryptic Proteome\",\n       y = \"Number of precursors\",\n       x = \"Precursor m/z\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mz distribution-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### AcK peptides\n\nPlotting the *m/z* distribution for Acetyl-K peptide precursors. Here, I'm restricting the peptides that have either 1 or 2 lysines. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(hu_acetyl %>% filter(precursor_mz > min_mz, precursor_mz < max_mz, k_count <= 2),\n       aes(x = precursor_mz)) +\n  geom_histogram(position = \"dodge\", binwidth = 10, color = \"black\", fill = \"grey80\") +\n  scale_x_continuous(n.breaks = 15) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  theme_bw(base_size = 14) +\n  labs(title = \"Peptide m/z distribution\",\n       subtitle = \"Acetyl Proteome\",\n       y = \"Number of precursors\",\n       x = \"Precursor m/z\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mz distribution for AcK peptides-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## DIA Window placement\n\nNext, we will zoom in to the m/z distribution between 640 and 650 and add the *optimized-window-placement* windows \n\n\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Human proteome (Trypsin)\ng1 <- ggplot(hu_prot %>% filter(precursor_mz >= mz1 & precursor_mz <= mz2)) +\n  geom_histogram(aes(x = precursor_mz), binwidth = 0.025, color = \"black\", fill = \"grey80\") +\n  geom_vline(data = optimal_windows_proteome %>% filter(start_mz >= mz1 & start_mz <= mz2), \n             aes(xintercept = start_mz), color = \"black\", linewidth = 1) +\n  theme_bw(base_size = 22) +\n  scale_x_continuous(n.breaks = 10) +\n    labs(title = \"Tryptic Proteome\",\n         subtitle = \"in silico digest\",\n         x = \"Precursor m/z\")\n\n# Acetyl proteome (Arg-C)\ng2 <- ggplot(hu_acetyl %>% filter(precursor_mz >= mz1 & precursor_mz <= mz2)) +\n  geom_histogram(aes(x = precursor_mz, fill = isotope), binwidth = 0.025, color = \"black\") +\n  geom_vline(data = optimal_windows_proteome %>% filter(start_mz >= mz1 & start_mz <= mz2), \n             aes(xintercept = start_mz), color = \"black\", linewidth = 1) +\n  theme_bw(base_size = 22) +\n  scale_x_continuous(n.breaks = 10) +\n    labs(title = \"Acetyl Proteome\",\n         subtitle = \"in silico digest\",\n         x = \"Precursor m/z\")\n\n# Acetyl Spectral library\ng3 <- ggplot(ack_speclib %>% filter(PrecursorMz >= mz1 & PrecursorMz <= mz2, PrecursorCharge < 4)) +\n  geom_histogram(aes(x = PrecursorMz), binwidth = 0.025, fill = \"#2b8cbe\", color = \"black\") +\n  geom_vline(data = optimal_windows_proteome %>% filter(start_mz >= mz1 & start_mz <= mz2), \n             aes(xintercept = start_mz), color = \"black\", linewidth = 1) +\n  theme_bw(base_size = 22) +\n  scale_x_continuous(n.breaks = 10) +\n    labs(title = \"Acetyl Spectral library\",\n         subtitle = \"Baeza et.al. JPR 2020\",\n         fill = \"Charge\",\n         x = \"Precursor m/z\")\n\n# Rendering all three plots\ng1 / g2 / g3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/DIA window placement-1.png){width=1536}\n:::\n:::\n\n\n## Conclusion\n\nSo, the optimized window placement function places the DIA windows within areas of the *m/z* space where monoisotopic peaks are not to be found. This works for acetyl-lysine peptides as well as deuterated acetyl-lysines as described in [Baeza et. al.](https://pubs.acs.org/doi/10.1021/acs.jproteome.0c00088)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}