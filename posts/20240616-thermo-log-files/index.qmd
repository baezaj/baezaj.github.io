---
title: "Processing Thermo Log files "
# description:
author:
  - name: Josue Baeza
    url: https://josuebaeza.com/
    orcid: 0000-0003-4960-3905
date: 06-6-2024
date-modified: last-modified
categories: [Mass Spectrometry, Thermo, Orbitrap, Log files] # self-defined categories
# image: 
toc: true
toc-location: left
toc-expand: true
draft: false
---

## Background

Thermo mass spectrometers record daily *log* files that contain a lot of valuable information regarding the status of each instrument. The *log* files record data for temperature, pressure, voltages, etc. from numerous guages. Visualizing this data longitudinally can help assess instrument performance. 

In this blog post, I will show you were to find the *log* files, how to import them, and how to visualize. 

### Supported Instruments

* Q-Exactive family instruments
* Exploris family instruments

*Note: Orbitrap Eclipse instruments do generate log files, however, this blog post will only focus on the instruments above because I don't have access to Eclipse log files*


### Directories

Data is located in the following directories for the different instruments

#### Q Exactive

`C:\ProgramData\Thermo\Exactive\Log`

#### Exploris

`C:\ProgramData\Thermo\Exploris\Log`

#### Tribrids

`C:\Thermo\Instruments\TNG\OrbitrapXXXXX\X.X\System\logs`

## Reading a *log* file

### Libraries used

```{r}
#| label: libraries
#| warning: false
#| message: false
#| error: false


library(tidyverse)
library(janitor)
library(lubridate)
library(kableExtra)

```

```{r}

# directory where I keep the log files
directory <- "QEHFX_logfiles/"

# Reading the log files in the directory
filelist <- list.files(directory, pattern = "InstrumentTemperature", full.names = TRUE)

# plucking a single log file to demonstrate
file <- filelist[1]

```


### Importing a single file

```{r}
#| label: Importing single file
#| eval: true


logfile <- read.delim2(file, sep = "\t", header = FALSE)
  

```



During the file import, I'm using `header = FALSE`. The instrument log files do not always have the first row with the header information. 

Additionally, the header row is often embedded multiple times in a single log file. Scroll down and see how many times this log file has the header information. This will need to be cleaned up in subsequent steps.

```{r}
#| label: Displaying table
#| echo: false
#| eval: true
#| column: body-outset

# Rendering table
logfile[,1:7] %>% 
  kable() %>% 
  kable_styling(bootstrap_options = c("striped", "hover")) %>% 
  scroll_box(height = "500px")

```


### Cleaning up header

These are the steps being performed in the following chunk.

  1. Indexing the rows in a single log file that contain the header-row
  2. Removing Non-ASCII characters from header
  3. Assigning a header-row as column names
  4. Removing all header-rows from log file
  5. Cleaning up column names using the `janitor` package
  

```{r}

# Indexing the header-rows
index <- grep("[a-z]", logfile[,3])

# Removing Non-ASCII characters
logfile[index[1],] <- iconv(logfile[index[1],], "utf-8", "ascii", sub = "")

# Assigning new column name
names(logfile) <- logfile[index[1],]

# Removing header-rows
logfile <- logfile[-index,]

# Cleaning column names
logfile <- logfile %>% clean_names(case = "snake") 


```


### Formatting data types

The next step is to convert the dataframe to `numeric` and the date column to `datetime`. During the data import, the header-rows being present forced all columns to import as character type. 


```{r}

# Creating a vector of date-time. I need to deal with this separately
date_column <- logfile$date

# Removing the date column from the data frame
logfile$date <- NA

# Need to convert the entire data frame to numeric
logfile <- as.data.frame(sapply(logfile, FUN = as.numeric))

# Now that the data frame is numeric, I can add back the date-time
logfile$date <- date_column
 
# Formatting date-time using lubridate
logfile$date <- ymd_hms(logfile$date)


```


## Putting it all together

This is the function used to import individual log files into a dataframe. 

```{r}
#| label: Import function
#| code-fold: false
#| include: true
#| eval: true

import_orbitrap_logfiles <- function(file){
  
  # Loading libraries
  require(tidyverse)
  require(janitor)
  require(lubridate)
  
  # Importing log file
  logfile <- read.delim2(file, sep = "\t", header = FALSE)
  
  # Indexing the header-rows
  index <- grep("[a-z]", logfile[,3])
  
  # Removing Non-ASCII characters
  logfile[index[1],] <- iconv(logfile[index[1],], "utf-8", "ascii", sub = "")
  
  # Assigning new column name
  names(logfile) <- logfile[index[1],]
  
  # Removing header-rows
  logfile <- logfile[-index,]
  
  # Cleaning column names
  logfile <- logfile %>% clean_names(case = "snake") 
  
  # Creating a vector of date-time. I need to deal with this separately
  date_column <- logfile$date
  
  # Removing the date-time from the dataframe
  logfile$date <- NA
  
  # Need to convert the entire dataframe to numeric
  logfile <- as.data.frame(sapply(logfile, FUN = as.numeric))
  
  # Now that the dataframe is numeric, I can add back the date-time
  logfile$date <- date_column
  
  # Formatting date-time
  logfile$date <- ymd_hms(logfile$date)
  
  # return dataframe
  return(logfile)
  
}

```




### Reading many log files

```{r}
#| label: Reading log files
#| code-fold: false
#| warning: false
#| include: true
#| eval: true

# directory where log files are kept
directory <- "QEHFX_logfiles/"

# Reading the log files in the directory
filelist <- list.files(directory, pattern = "InstrumentTemperature", full.names = TRUE)

# function to read in log files with some error handling
read_logfile_to_df <- function(x){
  tryCatch(import_orbitrap_logfiles(x),
           error = function(e) NA,
           warning = function(w) NA)
}

# importing log files and saving as a list
log <- filelist %>% 
  lapply(read_logfile_to_df) 

# Removing log files that generated an error
# I can go back and investigate why this happened later
log <- log[which(!is.na(log))]

# Concatenated files
data <- log %>% 
  bind_rows()

```


### Instrument readbacks

The log files record numerous instrument readbacks including:

-   Ambient temperature
-   Analyzer temperature
-   CEPS Peltier temperature
-   Fore vacuum pressure
-   High vacuum pressure
-   Ultra high vacuum pressure

Below is the full list of readbacks that are available for the QE-HFX. 

*Note: The list of readbacks for each instrument will vary slightly depending on model and tune version*

```{r}
#| label: full list of readbacks
#| echo: false

data.frame(InstrumentReadbacks = names(data)[3:47]) %>% 
  clean_names(case = "title") %>% 
  kable() %>% 
  scroll_box(height = "500px")


```



### Ambient Temperature



```{r}
#| label: Ambient Temp 1
#| code-fold: true
#| column: body-outset
#| fig-height: 6
#| fig-width: 16
#| include: true
#| eval: true


data %>% 
  filter(date >= as.Date("2018-04-01")) %>%
  ggplot(aes(x = date)) +
  geom_line(aes(y = ambient_temperature_raw_c)) +
  theme_bw(base_size = 22) +
  labs(x = NULL,
       y = expression('Temp ('~degree*C*')')) +
  scale_x_datetime(date_breaks = "3 month", 
                   date_minor_breaks = "1 month",
                   date_labels = "%b%y")
```

### Ultra High (UHV) Vacuum pressure 

Using `vacuum_2_uhv_mbar` to plot the UHV pressure can be useful to visualize instrument bake-out procedures. Each time there is a large spike in pressure, it coincides with an instrument venting and bake-out process. 

```{r}
#| label: UHV Pressure 1
#| code-fold: true
#| column: body-outset
#| fig-height: 6
#| fig-width: 16
#| include: true
#| eval: true
#| warning: false
#| message: false

data %>% 
  filter(date >= as.Date("2018-04-01")) %>%
  ggplot(aes(x = date)) +
  geom_line(aes(y = vacuum_2_uhv_mbar)) +
  theme_bw(base_size = 22) +
  scale_y_log10() +
  labs(x = NULL,
       y = expression('Pressure (mbar)')) +
  scale_x_datetime(date_breaks = "3 month", 
                   date_minor_breaks = "1 month",
                   date_labels = "%b%y")


```

### Orbitrap Temperature 

Another way to visualize bake-out procedures is to plot the Orbitrap temperature directly using `analyzer_temperature_sensor_c`.


```{r}
#| label: Orbitrap Temp 1
#| code-fold: true
#| column: body-outset
#| fig-height: 6
#| fig-width: 16
#| include: true
#| eval: true
#| warning: false
#| message: false

data %>% 
  filter(date >= as.Date("2018-04-01")) %>%
  ggplot(aes(x = date)) +
  geom_line(aes(y = analyzer_temperature_sensor_c)) +
  theme_bw(base_size = 22) +
  scale_y_log10() +
  labs(x = NULL,
       y = expression('Temp ('~degree*C*')')) +
  scale_x_datetime(date_breaks = "3 month", 
                   date_minor_breaks = "1 month",
                   date_labels = "%b%y")


```


## But Why!?!?!

This project started when I was a postdoc in the [Garcia lab](https://www.bengarcialab.com/) 

```{r}
#| label: QE HFX temp
#| code-fold: true
#| column: body-outset
#| fig-height: 6
#| fig-width: 16
#| include: true
#| eval: true


data %>% 
  filter(date >= as.Date("2018-10-01"),
         date <= as.Date("2018-12-01")) %>%
  ggplot(aes(x = date)) +
  geom_line(aes(y = ambient_temperature_raw_c)) +
  theme_bw(base_size = 22) +
  labs(x = NULL,
       y = expression('Temp ('~degree*C*')')) +
  scale_x_datetime(date_breaks = "1 month", 
                   date_minor_breaks = "1 week",
                   date_labels = "%b%y")
```
